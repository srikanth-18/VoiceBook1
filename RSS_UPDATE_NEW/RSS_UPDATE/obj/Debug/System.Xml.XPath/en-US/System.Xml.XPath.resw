<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Xp_InvalidNumArgs" xml:space="preserve">
    <value>Function '{0}' in '{1}' has an invalid number of arguments.</value>
  </data>
  <data name="Xp_BadQueryObject" xml:space="preserve">
    <value>This is an invalid object. Only objects returned from Compile() can be passed as input.</value>
  </data>
  <data name="Xp_CurrentNotAllowed" xml:space="preserve">
    <value>The 'current()' function cannot be used in a pattern.</value>
  </data>
  <data name="Xml_BadNameChar" xml:space="preserve">
    <value>The '{0}' character, hexadecimal value {1}, cannot be included in a name.</value>
  </data>
  <data name="Xml_EmptyName" xml:space="preserve">
    <value>The empty string '' is not a valid name.</value>
  </data>
  <data name="Xml_UserException" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="Xpn_BadPosition" xml:space="preserve">
    <value>Operation is not valid due to the current position of the navigator.</value>
  </data>
  <data name="Xp_UndefVar" xml:space="preserve">
    <value>The variable '{0}' is undefined.</value>
  </data>
  <data name="XmlUndefinedAlias" xml:space="preserve">
    <value>Namespace prefix '{0}' is not defined.</value>
  </data>
  <data name="NotSupported_MoveToId" xml:space="preserve">
    <value>This XPathNavigator does not support IDs.</value>
  </data>
  <data name="Xp_UndefinedXsltContext" xml:space="preserve">
    <value>XsltContext is needed for this query because of an unknown function.</value>
  </data>
  <data name="Xml_BadStartNameChar" xml:space="preserve">
    <value>Name cannot begin with the '{0}' character, hexadecimal value {1}.</value>
  </data>
  <data name="Xp_InvalidToken" xml:space="preserve">
    <value>'{0}' has an invalid token.</value>
  </data>
  <data name="InvalidOperation_UnexpectedEvaluation" xml:space="preserve">
    <value>The XPath expression evaluated to unexpected type {0}.</value>
  </data>
  <data name="Xp_FunctionFailed" xml:space="preserve">
    <value>Function '{0}()' has failed.</value>
  </data>
  <data name="InvalidOperation_BadNodeType" xml:space="preserve">
    <value>This operation is not valid on a node of type {0}.</value>
  </data>
  <data name="Xp_NoContext" xml:space="preserve">
    <value>Namespace Manager or XsltContext needed. This query has a prefix, variable, or user-defined function.</value>
  </data>
  <data name="Sch_EnumFinished" xml:space="preserve">
    <value>Enumeration has already finished.</value>
  </data>
  <data name="Xp_UndefFunc" xml:space="preserve">
    <value>The function '{0}()' is undefined.</value>
  </data>
  <data name="Xp_NotSupported" xml:space="preserve">
    <value>The XPath query '{0}' is not supported.</value>
  </data>
  <data name="Argument_CreateNavigator" xml:space="preserve">
    <value>This XPathNavigator cannot be created on a node of type {0}.</value>
  </data>
  <data name="Xp_InvalidArgumentType" xml:space="preserve">
    <value>The argument to function '{0}' in '{1}' cannot be converted to a node-set.</value>
  </data>
  <data name="Xp_InvalidKeyPattern" xml:space="preserve">
    <value>'{0}' is an invalid key pattern. It either contains a variable reference or 'key()' function.</value>
  </data>
  <data name="Xp_UnclosedString" xml:space="preserve">
    <value>This is an unclosed string.</value>
  </data>
  <data name="Xp_InvalidPattern" xml:space="preserve">
    <value>'{0}' is an invalid XSLT pattern.</value>
  </data>
  <data name="Xml_InvalidOperation" xml:space="preserve">
    <value>Operation is not valid due to the current state of the object.</value>
  </data>
  <data name="Xp_ExprExpected" xml:space="preserve">
    <value>'{0}' is an invalid expression.</value>
  </data>
  <data name="Xp_NodeSetExpected" xml:space="preserve">
    <value>Expression must evaluate to a node-set.</value>
  </data>
  <data name="Xp_InvalidName" xml:space="preserve">
    <value>'{0}' has an invalid qualified name.</value>
  </data>
  <data name="Sch_EnumNotStarted" xml:space="preserve">
    <value>Enumeration has not started. Call MoveNext.</value>
  </data>
</root>